type ProductImage {
  id: ID!
  productId: ID
  linkImage: String
  order: Int
  createdAt: String
  updatedAt: String
}

type Product {
  id: ID!
  name: String
  description: String
  subCategoryId: ID
  categoryId: ID
  sold: Int
  seen: Int
  isAvailable: Boolean
  minOrder: Int
  price: Int
  productImages: [ProductImage]
  subCategory: SubCategory
  category: Category
  createdAt: String
  updatedAt: String
}

input InputProductImage {
  linkImage: String!
  order: Int!
}

input NewProduct {
  name: String!
  description: String
  categoryId: ID!
  subCategoryId: ID
  isAvailable: Boolean
  minOrder: Int
  price: Int!
  productImages: [InputProductImage]
}

input InputUpdateProduct {
  name: String
  description: String
  categoryId: ID
  subCategoryId: ID
  isAvailable: Boolean
  minOrder: Int
  price: Int
  productImages: [InputProductImage]
}

input InputRecommendationProduct {
  productId: ID!
  categoryId: ID!
  limit: Int
}

extend type Query {
  products: [Product]
  product(productId: ID!): Product
  recommendationProducts(inputRecommendationProduct: InputRecommendationProduct): [Product]
}

extend type Mutation {
  createProduct(input: NewProduct!): Product
  updateProduct(productId: ID!, inputUpdateProduct: InputUpdateProduct!): Product
  deleteProduct(productId: ID!): Product
}
